import 'package:black_ants_app/models/advice.dart';
import 'package:black_ants_app/services/ai_advice_service.dart';
import 'package:flutter/material.dart';
import 'package:black_ants_app/config/app_constants.dart';
import 'package:intl/intl.dart'; // For date formatting (add intl package to pubspec.yaml if needed)

class AdviceScreen extends StatefulWidget {
  const AdviceScreen({super.key});

  @override
  State<AdviceScreen> createState() => _AdviceScreenState();
}

class _AdviceScreenState extends State<AdviceScreen> {
  final AiAdviceService _adviceService = AiAdviceService();
  Future<List<FinancialAdvice>>? _adviceFuture; // Changed to hold a list

  @override
  void initState() {
    super.initState();
    _fetchAdvice(); // Initial fetch
  }

  void _fetchAdvice() {
    setState(() {
      // Fetch a list of advice items instead of just one
      _adviceFuture = _adviceService.fetchAdviceList(count: 5);
    });
  }

  String _getCategoryIcon(AdviceCategory category) {
    switch (category) {
      case AdviceCategory.savings: return 'üí∞';
      case AdviceCategory.investing: return 'üìà';
      case AdviceCategory.trading: return 'üìä';
      case AdviceCategory.budgeting: return 'üßæ';
      case AdviceCategory.general: return 'üí°';
      default: return '‚ÑπÔ∏è';
    }
  }


  @override
  Widget build(BuildContext context) {
    final theme = Theme.of(context);
    final textTheme = theme.textTheme;

    return Scaffold( // Use Scaffold for floating action button
      body: RefreshIndicator( // Add pull-to-refresh
        onRefresh: () async {
           _fetchAdvice(); // Re-fetch data on pull
           await _adviceFuture; // Wait for the future to complete for the indicator
        },
        color: theme.colorScheme.primary, // Indicator color
        backgroundColor: theme.scaffoldBackgroundColor,
        child: FutureBuilder<List<FinancialAdvice>>(
          future: _adviceFuture,
          builder: (context, snapshot) {
            // --- Loading State ---
            if (snapshot.connectionState == ConnectionState.waiting) {
              return const Center(child: CircularProgressIndicator());
            }

            // --- Error State ---
            if (snapshot.hasError || !snapshot.hasData || snapshot.data!.isEmpty) {
              return Center(
                child: Column(
                   mainAxisAlignment: MainAxisAlignment.center,
                   children: [
                      Icon(Icons.error_outline, color: theme.colorScheme.error, size: 50),
                      const SizedBox(height: 16),
                      Text(
                       snapshot.hasError ? 'Failed to load advice.' : 'No advice available.',
                       style: textTheme.bodyLarge?.copyWith(color: theme.colorScheme.error),
                     ),
                     const SizedBox(height: 10),
                      Text(
                       'Pull down to retry.',
                        style: textTheme.bodyMedium?.copyWith(color: AppConstants.greyText),
                       ),
                   ],
                ),
              );
            }

             // --- Success State ---
            final adviceList = snapshot.data!;
            return ListView.builder(
              padding: const EdgeInsets.all(16.0),
              itemCount: adviceList.length + 1, // +1 for the header
              itemBuilder: (context, index) {
                 if (index == 0) {
                    // Header Section
                   return Padding(
                     padding: const EdgeInsets.only(bottom: 20.0),
                     child: Column(
                       crossAxisAlignment: CrossAxisAlignment.start,
                       children: [
                          Text(
                            'Personalized Insights',
                            style: textTheme.headlineSmall?.copyWith(color: theme.colorScheme.primary),
                           ),
                           const SizedBox(height: 8),
                           Text(
                              // --- AI Agent Explanation ---
                              "Powered by BlackAnts AI agents analyzing market trends and your (simulated) profile to provide relevant tips.",
                              // In a real app, you might mention the specific agents involved conceptually.
                              // "Insights generated by our Market Analysis and Risk Assessment AI agents."
                               style: textTheme.bodyMedium?.copyWith(color: AppConstants.greyText),
                            ),
                       ],
                      ),
                    );
                 }

                 // Actual advice item
                final advice = adviceList[index - 1]; // Adjust index for header
                final categoryIcon = _getCategoryIcon(advice.category);
                final formattedDate = DateFormat('MMM d, yyyy').format(advice.timestamp);

                return Card(
                   margin: const EdgeInsets.only(bottom: 16.0),
                  child: Padding(
                    padding: const EdgeInsets.all(16.0),
                    child: Column(
                      crossAxisAlignment: CrossAxisAlignment.start,
                      children: [
                        Row(
                           children: [
                              Text(categoryIcon, style: const TextStyle(fontSize: 20)),
                              const SizedBox(width: 8),
                              Expanded(
                                child: Text(
                                   advice.title,
                                  style: textTheme.titleLarge?.copyWith(fontWeight: FontWeight.bold),
                                  overflow: TextOverflow.ellipsis, // Prevent long titles from breaking layout
                                 ),
                              ),
                             Text(
                                formattedDate,
                                style: textTheme.labelSmall?.copyWith(color: AppConstants.greyText),
                             ),
                          ],
                         ),
                         const Divider(height: 20, thickness: 0.5),
                        Text(
                           advice.content,
                          style: textTheme.bodyMedium?.copyWith(height: 1.4), // Increased line height for readability
                         ),
                         const SizedBox(height: 10),
                        // Optional: Add actions like "Learn More" or "Dismiss" later
                         // Align(
                        //   alignment: Alignment.centerRight,
                         //   child: TextButton(
                          //     onPressed: () {},
                           //    child: Text('Learn More', style: TextStyle(color: theme.colorScheme.secondary)),
                            // ),
                         // ),
                      ],
                    ),
                  ),
                 );
               },
             );
          },
        ),
      ),
       floatingActionButton: FloatingActionButton( // FAB to request new advice
         onPressed: _fetchAdvice,
         backgroundColor: theme.colorScheme.primary,
          foregroundColor: theme.colorScheme.onPrimary,
         tooltip: 'Get New Advice',
         child: const Icon(Icons.refresh), // Or Icons.lightbulb_outline
       ),
    );
  }
}
